"""Structured data for decoding a FIT file definition message."""

__author__ = "Tom Goetz"
__copyright__ = "Copyright Tom Goetz"
__license__ = "GPL"

from Fit.message_type import MessageType
import Fit.fields as fields
import Fit.type_fields as type_fields
import Fit.enum_fields as enum_fields
import Fit.object_fields as object_fields
import Fit.activity_fields as activity_fields
import Fit.record_fields as record_fields
import Fit.manufacturer_product_fields as mp_fields
import Fit.device_fields as device_fields
import Fit.user_fields as user_fields


class DefinitionMessageData():
    """Structured data for decoding a FIT file definition message."""

    known_messages = {
        MessageType.file_id : {
            0 : enum_fields.FileTypeField('type'),
            1 : mp_fields.ManufacturerField(),
            2 : mp_fields.ProductField(),
            3 : type_fields.IntegerField('serial_number'),
            4 : fields.TimestampField('time_created', utc=True),
            5 : type_fields.IntegerField('number'),
            7 : type_fields.StringField('product_name')
        },
        MessageType.capabilities : {},
        MessageType.device_settings : {
            0 : fields.NamedField('active_time_zone'),
            1 : type_fields.FloatField('utc_offset'),
            2 : fields.TimeOffsetField(),
            4 : enum_fields.TimeModeField(),
            5 : fields.TimeHourField('time_zone_offset'),
            12 : device_fields.BacklightModeField(),
            35 : enum_fields.SwitchField('switch_35'),
            36 : type_fields.BoolField('activity_tracker_enabled'),
            38 : enum_fields.SwitchField('switch_38'),
            39 : fields.TimestampField('clock_time', utc=True),
            40 : fields.NamedField('pages_enabled'),
            41 : enum_fields.SwitchField('switch_41'),
            42 : enum_fields.SwitchField('switch_42'),
            43 : enum_fields.SwitchField('switch_43'),
            44 : enum_fields.SwitchField('switch_44'),
            45 : enum_fields.SwitchField('switch_45'),
            46 : type_fields.BoolField('move_alert_enabled'),
            47 : enum_fields.DateModeField(),
            48 : enum_fields.SwitchField('switch_48'),
            49 : enum_fields.SwitchField('switch_49'),
            52 : enum_fields.SwitchField('switch_52'),
            53 : enum_fields.SwitchField('switch_53'),
            55 : device_fields.DisplayOrientationField('display_orientation'),
            56 : device_fields.SideField(),
            57 : fields.NamedField('default_page'),
            58 : fields.NamedField('autosync_min_steps'),
            59 : fields.NamedField('autosync_min_time'),
            64 : enum_fields.SwitchField('switch_64'),
            65 : enum_fields.SwitchField('switch_65'),
            68 : enum_fields.SwitchField('switch_68'),
            80 : type_fields.BoolField('lactate_threshold_autodetect_enabled'),
            81 : enum_fields.SwitchField('switch_81'),
            82 : enum_fields.SwitchField('switch_82'),
            83 : enum_fields.SwitchField('switch_83'),
            84 : enum_fields.SwitchField('switch_84'),
            85 : enum_fields.SwitchField('switch_85'),
            86 : type_fields.BoolField('ble_auto_upload_enabled'),
            87 : enum_fields.SwitchField('switch_87'),
            89 : device_fields.AutoSyncFrequencyField(),
            90 : device_fields.AutoActivityDetectField(),
            94 : type_fields.IntegerField('number_of_screens'),
            95 : device_fields.DisplayOrientationField('smart_notification_display_orientation'),
            107 : enum_fields.SwitchField('switch_107'),
            108 : enum_fields.SwitchField('switch_108'),
            109 : enum_fields.SwitchField('switch_109'),
            110 : enum_fields.SwitchField('switch_110'),
            111 : enum_fields.SwitchField('switch_111'),
            112 : enum_fields.SwitchField('switch_112'),
            126 : enum_fields.SwitchField('switch_126'),
            127 : enum_fields.SwitchField('switch_127'),
            128 : enum_fields.SwitchField('switch_128'),
            133 : enum_fields.SwitchField('switch_133'),
            134 : enum_fields.SwitchField('tap_interface'),
            141 : enum_fields.SwitchField('switch_141'),
        },
        MessageType.user_profile : {
            1 : user_fields.GenderField(),
            2 : type_fields.IntegerField('age'),
            3 : object_fields.HeightField(),
            4 : object_fields.WeightField('weight'),
            5 : user_fields.LanguageField(),
            6 : enum_fields.DisplayMeasureField('elev_setting'),
            7 : enum_fields.DisplayMeasureField('weight_setting'),
            8 : type_fields.HeartRateField('resting_heart_rate'),
            9 : type_fields.HeartRateField('default_max_running_heart_rate'),
            10 : type_fields.HeartRateField('default_max_biking_heart_rate'),
            11 : type_fields.HeartRateField('default_max_heart_rate'),
            12 : enum_fields.DisplayHeartField('hr_setting'),
            13 : enum_fields.DisplayMeasureField('speed_setting'),
            14 : enum_fields.DisplayMeasureField('dist_setting'),
            16 : fields.PowerField('power_setting'),
            17 : activity_fields.ActivityClassField(),
            18 : enum_fields.DisplayPositionField(),
            21 : enum_fields.DisplayMeasureField('temperature_setting'),
            22 : fields.NamedField('local_id'),
            23 : fields.NamedField('global_id'),
            28 : fields.TimeOfDayField('wake_time'),
            29 : fields.TimeOfDayField('sleep_time'),
            30 : enum_fields.DisplayMeasureField('height_setting'),
            31 : object_fields.EnhancedDistanceMetersField('user_running_step_length'),
            32 : object_fields.EnhancedDistanceMetersField('user_walking_step_length'),
            35 : fields.TimestampField('ts_35', utc=True),
            41 : fields.TimestampField('ts_41', utc=True),
            47 : enum_fields.DisplayMeasureField('depth_setting'),
            49 : type_fields.IntegerField('dive_count'),
        },
        MessageType.hrm_profile : {
            0 : type_fields.BoolField('enabled'),
            1 : fields.NamedField('hrm_ant_id'),
            2 : type_fields.BoolField('log_hrv'),
            3 : fields.NamedField('hrm_ant_id_trans_type'),
        },
        MessageType.sdm_profile : {},
        MessageType.bike_profile : {
            0 : type_fields.StringField('name'),
            1 : activity_fields.SportField(),
            2 : activity_fields.SubSportField(),
            3 : object_fields.DistanceCentimetersToMetersField('odometer'),
            4 : fields.NamedField('bike_spd_ant_id'),
            5 : fields.NamedField('bike_cad_ant_id'),
            6 : fields.NamedField('bike_spdcad_ant_id'),
            7 : fields.NamedField('bike_power_ant_id'),
            8 : object_fields.DistanceMillimetersToMetersField('custom_wheelsize'),
            9 : object_fields.DistanceMillimetersToMetersField('auto_wheelsize'),
            10 : object_fields.WeightField('bike_weight'),
            11 : fields.PercentField('power_cal_factor'),
            12 : type_fields.BoolField('auto_wheel_cal'),
            13 : type_fields.BoolField('auto_power_zero'),
            14 : type_fields.IntegerField('id'),
            15 : type_fields.BoolField('spd_enabled'),
            16 : type_fields.BoolField('cad_enabled'),
            17 : type_fields.BoolField('spdcad_enabled'),
            18 : type_fields.BoolField('power_enabled'),
            19 : object_fields.DistanceMillimetersToMetersField('crank_length'),
            20 : type_fields.BoolField('enabled'),
            21 : fields.NamedField('bike_spd_ant_id_trans_type'),
            22 : fields.NamedField('bike_cad_ant_id_trans_type'),
            23 : fields.NamedField('bike_spdcad_ant_id_trans_type'),
            24 : fields.NamedField('bike_power_ant_id_trans_type'),
            37 : fields.NamedField('odometer_rollover'),
        },
        MessageType.zones_target : {
            1 : type_fields.HeartRateField('max_heart_rate'),
            2 : type_fields.HeartRateField('threshold_heart_rate'),
            3 : fields.NamedField('functional_threshold_power'),
            5 : enum_fields.HeartRateZoneCalcField(),
            7 : enum_fields.PowerCalcField()
        },
        MessageType.hr_zone : {
            1 : type_fields.HeartRateField('high_bpm'),
            2 : type_fields.StringField('name'),
        },
        MessageType.power_zone : {
            1 : fields.PowerField('high_value'),
            2 : type_fields.StringField('name'),
        },
        MessageType.met_zone : {},
        MessageType.sport : {
            0 : activity_fields.SportField(),
            1 : activity_fields.SubSportField(),
            3 : type_fields.StringField('name'),
        },
        MessageType.unknown_13 : {
            5 : object_fields.LatiitudeField('lat_5'),
            6 : object_fields.LongitudeField('long_6'),
        },
        MessageType.unknown_14 : {
            10 : fields.Field(name='sequence'),
        },
        MessageType.goal : {
            0 : activity_fields.SportField(),
            1 : activity_fields.SubSportField(),
            2 : fields.TimestampField('start_time', utc=True),
            3 : fields.TimestampField('end_time', utc=True),
            4 : record_fields.GoalTypeField('type'),
            5 : fields.NamedField('value'),
            6 : type_fields.BoolField('repeat'),
            7 : record_fields.GoalValueField(),
            8 : record_fields.GoalRecurrenceField('recurrence'),
            9 : fields.NamedField('recurrence_value'),
            10 : type_fields.BoolField('enabled'),
            11 : record_fields.GoalSourceField('source')
        },
        MessageType.session : {
            0 : enum_fields.EventField(),
            1 : enum_fields.EventTypeField(),
            2 : fields.TimestampField('start_time', utc=True),
            3 : object_fields.LatiitudeField('start_position_lat'),
            4 : object_fields.LongitudeField('start_position_long'),
            5 : activity_fields.SportField(),
            6 : activity_fields.SubSportField(),
            7 : fields.TimeMsField('total_elapsed_time'),
            8 : fields.TimeMsField('total_timer_time'),
            9 : object_fields.DistanceCentimetersToKmsField('total_distance'),
            10 : activity_fields.SportBasedCyclesField('total_cycles'),
            11 : fields.CaloriesField('total_calories'),
            13 : fields.CaloriesField('total_fat_calories'),
            14 : object_fields.SpeedMpsField('avg_speed'),
            15 : object_fields.SpeedMpsField('max_speed'),
            16 : type_fields.HeartRateField('avg_heart_rate'),
            17 : type_fields.HeartRateField('max_heart_rate'),
            18 : fields.CadenceField('avg_cadence'),
            19 : fields.CadenceField('max_cadence'),
            20 : fields.PowerField('avg_power'),
            21 : fields.PowerField('max_power'),
            22 : object_fields.DistanceMetersField('total_ascent'),
            23 : object_fields.DistanceMetersField('total_descent'),
            24 : fields.TrainingEffectField('total_training_effect'),
            25 : type_fields.IntegerField('first_lap_index'),
            26 : type_fields.IntegerField('num_laps'),
            27 : fields.NamedField('event_group'),
            28 : enum_fields.SessionTriggerField(),
            29 : object_fields.LatiitudeField('nec_lat'),
            30 : object_fields.LongitudeField('nec_long'),
            31 : object_fields.LatiitudeField('swc_lat'),
            32 : object_fields.LongitudeField('swc_long'),
            33 : type_fields.IntegerField('length_count'),
            34 : fields.PowerField('normalized_power'),
            35 : fields.TrainingEffectField('training_stress_score'),
            36 : fields.NamedField('intensity_factor'),
            37 : fields.LeftRightBalanceField('left_right_balance'),
            38 : object_fields.LatiitudeField('end_position_lat'),
            39 : object_fields.LongitudeField('end_position_long'),
            41 : type_fields.IntegerField('avg_stroke_count'),
            42 : object_fields.DistanceCentimetersToMetersField('avg_stroke_distance'),
            43 : fields.NamedField('swim_stroke'),
            44 : object_fields.DistanceMetersField('pool_length'),
            45 : fields.PowerField('threshold_power'),
            46 : enum_fields.DisplayMeasureField('pool_length_unit'),
            47 : type_fields.IntegerField('num_active_lengths'),
            48 : fields.WorkField(),
            49 : object_fields.EnhancedAltitudeField('avg_altitude'),
            50 : object_fields.EnhancedAltitudeField('max_altitude'),
            51 : object_fields.DistanceMetersField('gps_accuracy'),
            52 : fields.PercentField('avg_grade'),
            53 : fields.PercentField('avg_pos_grade'),
            54 : fields.PercentField('avg_neg_grade'),
            55 : fields.PercentField('max_pos_grade'),
            56 : fields.PercentField('max_neg_grade'),
            57 : object_fields.TemperatureField('avg_temperature'),
            58 : object_fields.TemperatureField('max_temperature'),
            59 : fields.TimeMsField('total_moving_time'),
            60 : object_fields.SpeedMpsField('avg_pos_vertical_speed'),
            61 : object_fields.SpeedMpsField('avg_neg_vertical_speed'),
            62 : object_fields.SpeedMpsField('max_pos_vertical_speed'),
            63 : object_fields.SpeedMpsField('max_neg_vertical_speed'),
            64 : type_fields.HeartRateField('min_heart_rate'),
            65 : fields.TimeMsField('time_in_hr_zone'),
            66 : fields.TimeMsField('time_in_speed_zone'),
            67 : fields.TimeMsField('time_in_cadence_zone'),
            68 : fields.TimeMsField('time_in_power_zone'),
            69 : fields.TimeMsField('avg_lap_time'),
            70 : type_fields.IntegerField('best_lap_index'),
            71 : object_fields.EnhancedAltitudeField('min_altitude'),
            78 : fields.NamedField('total_swim_time'),
            79 : fields.NamedField('average_stroke'),
            80 : fields.NamedField('swolf'),
            82 : fields.NamedField('player_score'),
            83 : fields.NamedField('opponent_score'),
            84 : type_fields.StringField('opponent_name'),
            85 : type_fields.IntegerField('stroke_count'),
            86 : type_fields.IntegerField('zone_count'),
            87 : object_fields.SpeedMpsField('max_ball_speed'),
            88 : object_fields.SpeedMpsField('avg_ball_speed'),
            89 : object_fields.DistanceMillimetersField('avg_vertical_oscillation'),
            90 : fields.PercentField('avg_stance_time_percent'),
            91 : fields.TimeMsField('avg_stance_time', scale=10.0),
            92 : fields.FractionalCadenceField('avg_fractional_cadence'),
            93 : fields.FractionalCadenceField('max_fractional_cadence'),
            94 : fields.FractionalCyclesField(),
            95 : type_fields.FloatField('avg_total_hemoglobin_conc'),
            96 : type_fields.FloatField('min_total_hemoglobin_conc'),
            97 : type_fields.FloatField('max_total_hemoglobin_conc'),
            98 : fields.PercentField('avg_saturated_hemoglobin_percent'),
            99 : fields.PercentField('min_saturated_hemoglobin_percent'),
            100 : fields.PercentField('max_saturated_hemoglobin_percent'),
            101 : fields.BytePercentField('avg_left_torque_effectiveness'),
            102 : fields.BytePercentField('avg_right_torque_effectiveness'),
            103 : fields.BytePercentField('avg_left_pedal_smoothness'),
            104 : fields.BytePercentField('avg_right_pedal_smoothness'),
            105 : fields.BytePercentField('avg_combined_pedal_smoothness'),
            110 : type_fields.StringField('sport_name'),
            111 : type_fields.IntegerField('sport_index'),
            112 : fields.TimeMsField('time_standing'),
            113 : fields.NamedField('stand_count'),
            114 : fields.NamedField('avg_left_pco'),
            115 : fields.NamedField('avg_right_pco'),
            116 : fields.NamedField('avg_left_power_phase'),
            117 : fields.NamedField('avg_left_power_phase_peak'),
            118 : fields.NamedField('avg_right_power_phase'),
            119 : fields.NamedField('avg_right_power_phase_peak'),
            120 : fields.PowerField('avg_power_position'),
            121 : fields.PowerField('max_power_position'),
            122 : fields.CadenceField('avg_cadence_position'),
            123 : fields.CadenceField('max_cadence_position'),
            124 : object_fields.SpeedMpsField('enhanced_avg_speed'),
            125 : object_fields.SpeedMpsField('enhanced_max_speed'),
            126 : object_fields.EnhancedAltitudeField('enhanced_avg_altitude'),
            127 : object_fields.EnhancedAltitudeField('enhanced_min_altitude'),
            128 : object_fields.EnhancedAltitudeField('enhanced_max_altitude'),
            129 : fields.PowerField('avg_lev_motor_power'),
            130 : fields.PowerField('max_lev_motor_power'),
            131 : fields.BytePercentField('lev_battery_consumption'),
            132 : fields.PercentField('avg_vertical_ratio'),
            133 : fields.PercentField('avg_stance_time_balance'),
            134 : object_fields.DistanceMillimetersField('avg_step_length'),
            137 : fields.TrainingEffectField('total_anaerobic_training_effect'),
            139 : object_fields.SpeedMpsField('avg_vam'),
            150 : object_fields.TemperatureField('min_temperature'),
            169 : type_fields.RespirationRateField('avg_respiration_rate'),
            170 : type_fields.RespirationRateField('max_respiration_rate'),
            178: type_fields.FloatField('fluid_consumed'),
            180 : type_fields.RespirationRateField('min_respiration_rate'),
        },
        MessageType.lap : {
            0 : enum_fields.EventField(),
            1 : enum_fields.EventTypeField(),
            2 : fields.TimestampField('start_time', utc=True),
            3 : object_fields.LatiitudeField('start_position_lat'),
            4 : object_fields.LongitudeField('start_position_long'),
            5 : object_fields.LatiitudeField('end_position_lat'),
            6 : object_fields.LongitudeField('end_position_long'),
            7 : fields.TimeMsField('total_elapsed_time'),
            8 : fields.TimeMsField('total_timer_time'),
            9 : object_fields.DistanceCentimetersToKmsField('total_distance'),
            10 : activity_fields.SportBasedCyclesField('total_cycles'),
            11 : fields.CaloriesField('total_calories'),
            12 : fields.CaloriesField('total_fat_calories'),
            13 : object_fields.SpeedMpsField('avg_speed'),
            14 : object_fields.SpeedMpsField('max_speed'),
            15 : type_fields.HeartRateField('avg_heart_rate'),
            16 : type_fields.HeartRateField('max_heart_rate'),
            17 : fields.CadenceField('avg_cadence'),
            18 : fields.CadenceField('max_cadence'),
            19 : fields.PowerField('avg_power'),
            20 : fields.PowerField('max_power'),
            21 : object_fields.DistanceMetersField('total_ascent'),
            22 : object_fields.DistanceMetersField('total_descent'),
            24 : enum_fields.LapTriggerField(),
            25 : activity_fields.SportField(),
            26 : fields.NamedField('event_group'),
            27 : object_fields.LatiitudeField('unknown_lat_27'),
            28 : object_fields.LongitudeField('unknown_long_28'),
            29 : object_fields.LatiitudeField('unknown_lat_29'),
            30 : object_fields.LongitudeField('unknown_long_30'),
            32 : type_fields.IntegerField('num_lengths'),
            33 : fields.PowerField('normalized_power'),
            34 : fields.LeftRightBalanceField('left_right_balance'),
            35 : type_fields.IntegerField('first_length_index'),
            37 : object_fields.DistanceCentimetersToMetersField('avg_stroke_distance'),
            38 : fields.NamedField('swim_stroke'),
            39 : activity_fields.SubSportField(),
            40 : type_fields.IntegerField('num_active_lengths'),
            41 : fields.WorkField(),
            42 : object_fields.EnhancedAltitudeField('avg_altitude'),
            43 : object_fields.EnhancedAltitudeField('max_altitude'),
            44 : object_fields.DistanceMetersField('gps_accuracy'),
            45 : fields.PercentField('avg_grade'),
            46 : fields.PercentField('avg_pos_grade'),
            47 : fields.PercentField('avg_neg_grade'),
            48 : fields.PercentField('max_pos_grade'),
            49 : fields.PercentField('max_neg_grade'),
            50 : object_fields.TemperatureField('avg_temperature'),
            51 : object_fields.TemperatureField('max_temperature'),
            52 : fields.TimeMsField('total_moving_time'),
            53 : object_fields.SpeedMpsField('avg_pos_vertical_speed'),
            54 : object_fields.SpeedMpsField('avg_neg_vertical_speed'),
            55 : object_fields.SpeedMpsField('max_pos_vertical_speed'),
            56 : object_fields.SpeedMpsField('max_neg_vertical_speed'),
            57 : fields.TimeMsField('time_in_hr_zone'),
            58 : fields.TimeMsField('time_in_speed_zone'),
            59 : fields.TimeMsField('time_in_cadence_zone'),
            60 : fields.TimeMsField('time_in_power_zone'),
            61 : type_fields.IntegerField('repetition_num'),
            62 : object_fields.EnhancedAltitudeField('min_altitude'),
            63 : type_fields.HeartRateField('min_heart_rate'),
            70 : fields.NamedField('swim_time'),
            71 : fields.MessageIndexField('wkt_step_index'),
            72 : fields.NamedField('average_stroke'),
            73 : fields.NamedField('swolf'),
            74 : fields.NamedField('opponent_score'),
            75 : type_fields.IntegerField('stroke_count'),
            76 : type_fields.IntegerField('zone_count'),
            77 : object_fields.DistanceMillimetersField('avg_vertical_oscillation'),
            78 : fields.PercentField('avg_stance_time_percent'),
            79 : fields.TimeMsField('avg_stance_time', scale=10.0),
            80 : fields.FractionalCadenceField('avg_fractional_cadence'),
            81 : fields.FractionalCadenceField('max_fractional_cadence'),
            82 : fields.FractionalCyclesField(),
            83 : fields.NamedField('player_score'),
            84 : fields.NamedField('avg_total_hemoglobin_conc'),
            85 : fields.NamedField('min_total_hemoglobin_conc'),
            86 : fields.NamedField('max_total_hemoglobin_conc'),
            87 : fields.PercentField('avg_saturated_hemoglobin_percent'),
            88 : fields.PercentField('min_saturated_hemoglobin_percent'),
            89 : fields.PercentField('max_saturated_hemoglobin_percent'),
            91 : fields.BytePercentField('avg_left_torque_effectiveness'),
            92 : fields.BytePercentField('avg_right_torque_effectiveness'),
            93 : fields.BytePercentField('avg_left_pedal_smoothness'),
            94 : fields.BytePercentField('avg_right_pedal_smoothness'),
            95 : fields.BytePercentField('avg_combined_pedal_smoothness'),
            98 : fields.TimeMsField('time_standing'),
            99 : type_fields.IntegerField('stand_count'),
            100 : fields.NamedField('avg_left_pco'),
            101 : fields.NamedField('avg_right_pco'),
            102 : fields.NamedField('avg_left_power_phase'),
            103 : fields.NamedField('avg_left_power_phase_peak'),
            104 : fields.NamedField('avg_right_power_phase'),
            105 : fields.NamedField('avg_right_power_phase_peak'),
            106 : fields.PowerField('avg_power_position'),
            107 : fields.PowerField('max_power_position'),
            108 : fields.CadenceField('avg_cadence_position'),
            109 : fields.CadenceField('max_cadence_position'),
            110 : object_fields.SpeedMpsField('enhanced_avg_speed'),
            111 : object_fields.SpeedMpsField('enhanced_max_speed'),
            112 : object_fields.EnhancedAltitudeField('enhanced_avg_altitude'),
            113 : object_fields.EnhancedAltitudeField('enhanced_min_altitude'),
            114 : object_fields.EnhancedAltitudeField('enhanced_max_altitude'),
            115 : fields.PowerField('avg_lev_motor_power'),
            116 : fields.PowerField('max_lev_motor_power'),
            117 : fields.BytePercentField('lev_battery_consumption'),
            118 : fields.PercentField('avg_vertical_ratio', 100.0),
            119 : fields.PercentField('avg_stance_time_balance'),
            120 : object_fields.DistanceMillimetersField('avg_step_length'),
            121 : object_fields.SpeedMpsField('avg_vam'),
            136 : type_fields.RespirationRateField('avg_respiration_rate'),
            137 : type_fields.RespirationRateField('max_respiration_rate'),
        },
        MessageType.record : {
            0 : object_fields.LatiitudeField('position_lat'),
            1 : object_fields.LongitudeField('position_long'),
            2 : object_fields.AltitudeField(),
            3 : type_fields.HeartRateField('heart_rate'),
            4 : fields.CadenceField(),
            5 : object_fields.DistanceCentimetersToKmsField('distance'),
            6 : object_fields.SpeedMpsField('speed'),
            7 : fields.PowerField(),
            8 : fields.NamedField('compressed_speed_distance'),
            9 : fields.PercentField('grade'),
            10 : fields.NamedField('resistance'),
            11 : fields.TimeMsField('time_from_course'),
            12 : object_fields.DistanceMetersField('cycle_length', scale=100),
            13 : object_fields.TemperatureField('temperature'),
            17 : object_fields.SpeedMpsField('speed_1s'),
            18 : activity_fields.ActivityBasedCyclesField(),
            19 : activity_fields.ActivityBasedCyclesField('total_cycles'),
            28 : fields.NamedField('compressed_accumulated_power'),
            29 : fields.NamedField('accumulated_power'),
            30 : fields.LeftRightBalanceField('left_right_balance'),
            31 : object_fields.DistanceMetersField('gps_accuracy'),
            32 : object_fields.SpeedMpsField('vertical_speed'),
            33 : fields.CaloriesField(),
            39 : object_fields.DistanceMillimetersField('avg_vertical_oscillation'),
            40 : fields.PercentField('stance_time_percent'),
            41 : fields.TimeMsField('stance_time', scale=10.0),
            42 : activity_fields.ActivityTypeField(),
            43 : fields.BytePercentField('left_torque_effectiveness'),
            44 : fields.BytePercentField('right_torque_effectiveness'),
            45 : fields.BytePercentField('left_pedal_smoothness'),
            46 : fields.BytePercentField('right_pedal_smoothness'),
            47 : fields.BytePercentField('combined_pedal_smoothness'),
            48 : fields.NamedField('time128'),
            49 : fields.NamedField('stroke_type'),
            50 : fields.NamedField('zone'),
            51 : fields.NamedField('ball_speed'),
            52 : fields.CadenceField('cadence256'),
            53 : fields.FractionalCadenceField(),
            54 : fields.NamedField('total_hemoglobin_conc'),
            55 : fields.NamedField('total_hemoglobin_conc_min'),
            56 : fields.NamedField('total_hemoglobin_conc_max'),
            57 : fields.PercentField('saturated_hemoglobin_percent'),
            58 : fields.PercentField('saturated_hemoglobin_percent_min'),
            59 : fields.PercentField('saturated_hemoglobin_percent_max'),
            62 : type_fields.IntegerField('device_index'),
            67 : fields.NamedField('left_pco'),
            68 : fields.NamedField('right_pco'),
            69 : fields.NamedField('left_power_phase'),
            70 : fields.NamedField('left_power_phase_peak'),
            71 : fields.NamedField('right_power_phase'),
            72 : fields.NamedField('right_power_phase_peak'),
            73 : object_fields.SpeedMpsField('enhanced_speed'),
            78 : object_fields.EnhancedAltitudeField('enhanced_altitude'),
            83 : fields.PercentField('vertical_ratio', 100.0),
            84 : fields.PercentField('stance_time_balance'),
            85 : object_fields.DistanceMillimetersField('step_length'),
            91 : type_fields.AbsolutePressureField(),
            92 : object_fields.DistanceMillimetersField('depth'),
            93 : object_fields.DistanceMillimetersField('next_stop_depth'),
            94 : fields.TimeSField('next_stop_time'),
            95 : fields.TimeSField('time_to_surface'),
            96 : fields.TimeSField('ndl_time'),
            97 : fields.PercentField('cns_load'),
            98 : fields.PercentField('n2_load'),
            108 : type_fields.RespirationRateField(),
            114 : type_fields.FloatField('grit'),
            115 : type_fields.FloatField('flow'),
        },
        MessageType.event : {
            0 : enum_fields.EventField('event'),
            1 : enum_fields.EventTypeField(),
            2 : fields.NamedField('data16'),
            3 : fields.NamedField('data'),
            4 : fields.NamedField('event_group'),
            7 : fields.NamedField('score'),
            8 : fields.NamedField('opponent_score'),
            9 : fields.NamedField('front_gear_num'),
            10 : fields.NamedField('front_gear'),
            11 : fields.NamedField('rear_gear_num'),
            12 : fields.NamedField('rear_gear'),
            13 : type_fields.IntegerField('device_index'),
            15 : fields.TimestampField('ts_15', utc=True),
        },
        MessageType.source : {},
        MessageType.device_info : {
            0 : type_fields.IntegerField('device_index'),
            1 : device_fields.DeviceType(),
            2 : mp_fields.ManufacturerField(),
            3 : type_fields.IntegerField('serial_number'),
            4 : mp_fields.ProductField(),
            5 : fields.VersionField('software_version'),
            6 : fields.NamedField('hardware_version'),
            7 : fields.TimeMsField('cum_operating_time', scale=1000.0),
            10 : device_fields.BatteryVoltageField(),
            11 : device_fields.BatteryStatusField(),
            15 : fields.NamedField('ant_related'),    # only found on ant devices?
            18 : device_fields.BodyLocationField('sensor_position'),
            19 : type_fields.StringField('descriptor'),
            20 : fields.NamedField('ant_transmission_type'),
            21 : fields.NamedField('ant_device_number'),
            22 : device_fields.AntNetworkField(),
            24 : type_fields.IntegerField('sensor_id'),
            25 : device_fields.SourceTypeField(),
            27 : type_fields.StringField('product_name'),
        },
        MessageType.unknown_24 : {
            2 : type_fields.BytesField('data'),
        },
        MessageType.workout : {
            6 : type_fields.IntegerField('num_valid_steps'),
            8 : type_fields.StringField('wkt_name'),
        },
        MessageType.workout_step : {},
        MessageType.schedule : {},
        MessageType.location : {},
        MessageType.weight_scale : {
            0 : object_fields.WeightField('weight'),
            1 : fields.PercentField('percent_fat'),
            2 : fields.PercentField('percent_hydration'),
            3 : object_fields.WeightField('visceral_fat_mass'),
            4 : object_fields.WeightField('bone_mass'),
            5 : object_fields.WeightField('muscle_mass'),
            7 : fields.NamedField('basal_met'),
            8 : fields.NamedField('physique_rating'),
            9 : fields.NamedField('active_met'),
            10 : fields.NamedField('metabolic_age'),
            11 : fields.NamedField('visceral_fat_rating'),
            12 : fields.NamedField('user_profile_index')
        },
        MessageType.course : {},
        MessageType.course_point : {},
        MessageType.totals : {
            0 : fields.TimeSField('timer_time'),
            1 : object_fields.DistanceMetersField('distance'),
            2 : fields.CaloriesField(),
            3 : activity_fields.SportField(),
            4 : fields.TimeSField('elapsed_time'),
            5 : type_fields.IntegerField('sessions'),
            6 : fields.TimeSField('active_time'),
            9 : type_fields.IntegerField('sport_index'),
        },
        MessageType.activity : {
            0 : fields.TimeMsField('total_timer_time'),
            1 : type_fields.IntegerField('num_sessions'),
            2 : activity_fields.ActivityField(),
            3 : enum_fields.EventField(),
            4 : enum_fields.EventTypeField(),
            5 : fields.TimestampField('local_timestamp', utc=False),
            6 : fields.NamedField('event_group'),
        },
        MessageType.software : {
            3 : fields.VersionField()
        },
        MessageType.file_capabilities : {},
        MessageType.mesg_capabilities : {},
        MessageType.field_capabilities : {},
        MessageType.file_creator : {
            0 : fields.VersionField('software_version'),
            1 : fields.VersionField('hardware_version'),
            2 : type_fields.BytesField('data')
        },
        MessageType.blood_pressure : {},
        MessageType.speed_zone : {},
        MessageType.monitoring : {
            0 : type_fields.IntegerField('device_index'),
            1 : fields.CaloriesField(),
            2 : object_fields.DistanceCentimetersToMetersField('distance'),
            3 : activity_fields.ActivityBasedCyclesField(),
            4 : fields.TimeMsField('cum_active_time'),
            5 : activity_fields.ActivityTypeField(),
            6 : fields.NamedField('activity_subtype'),
            7 : fields.NamedField('activity_level'),
            14 : object_fields.TemperatureField('temperature_min'),
            15 : object_fields.TemperatureField('temperature_max'),
            19 : fields.ActiveCaloriesField(),
            24 : activity_fields.ActivityTypeIntensityField('current_activity_type_intensity'),
            26 : fields.TimeSField('timestamp_16'),
            27 : type_fields.HeartRateField('heart_rate'),
            29 : fields.TimeMinField('duration'),
            31 : object_fields.DistanceMillimetersToMetersField('ascent'),
            32 : object_fields.DistanceMillimetersToMetersField('descent'),
            33 : fields.TimeMinField('moderate_activity_time'),
            34 : fields.TimeMinField('vigorous_activity_time'),
            35 : object_fields.DistanceMillimetersToMetersField('cum_ascent'),
            36 : object_fields.DistanceMillimetersToMetersField('cum_descent')
        },
        MessageType.training_file : {
            0 : enum_fields.FileTypeField('type'),
            1 : mp_fields.ManufacturerField(),
            2 : mp_fields.ProductField(),
            3 : type_fields.IntegerField('serial_number'),
            4 : fields.TimestampField('time_created', utc=True),
        },  # timestamp, serial_number, creation_time, product_ID, session_style
        MessageType.hrv : {
            0 : fields.TimeMsField('time'),
        },
        MessageType.ant_rx : {},
        MessageType.ant_tx : {},
        MessageType.ant_channel_id : {},
        MessageType.length : {},
        MessageType.monitoring_info : {
            0 : fields.TimestampField('local_timestamp', utc=False),
            1 : activity_fields.ActivityTypeField(),
            3 : fields.CyclesDistanceField(),
            4 : fields.CyclesCaloriesField(),
            5 : fields.CaloriesDayField('resting_metabolic_rate')
        },
        MessageType.battery : {
            0 : fields.TimeMinField('remaining_mins'),
            2 : fields.PercentField('charge'),
            3 : device_fields.BatteryVoltageField(scale=10.0),
        },
        MessageType.pad : {},
        MessageType.slave_device : {},
        MessageType.personal_record : {
            0 : record_fields.PersonalRecordTypeField(),
            1 : activity_fields.SportField(),
            2 : object_fields.DistanceCentimetersToMetersField('record_distance'),
            3 : object_fields.DistanceCentimetersToMetersField('record_distance2'),
            4 : object_fields.DistanceCentimetersToMetersField('actual_distance'),
            5 : record_fields.PersonalRecordField()
        },
        MessageType.connectivity : {
            0 : type_fields.BoolField('bluetooth_enabled'),
            1 : type_fields.BoolField('bluetooth_le_enabled'),
            2 : type_fields.BoolField('ant_enabled'),
            3 : type_fields.StringField('name'),
            4 : type_fields.BoolField('live_tracking_enabled'),
            5 : type_fields.BoolField('weather_conditions_enabled'),
            6 : type_fields.BoolField('weather_alerts_enabled'),
            7 : type_fields.BoolField('auto_activity_upload_enabled'),
            8 : type_fields.BoolField('course_download_enabled'),
            9 : type_fields.BoolField('workout_download_enabled'),
            10 : type_fields.BoolField('gps_ephemeris_download_enabled'),
            11 : type_fields.BoolField('incident_detection_enabled'),
            12 : type_fields.BoolField('grouptrack_enabled'),
        },
        MessageType.weather_conditions : {},
        MessageType.weather_alert : {},
        MessageType.cadence_zone : {},
        MessageType.hr : {},
        MessageType.unknown_140 : {
            21 : object_fields.LatiitudeField('position_21'),
            24 : object_fields.LongitudeField('position_24'),
        },
        MessageType.unknown_141 : {
            1 : fields.TimestampField('ts_1', utc=False),
            2 : fields.TimestampField('ts_2', utc=False),
            4 : object_fields.LatiitudeField('position_4'),
            5 : object_fields.LongitudeField('position_5'),
        },
        MessageType.segment_lap : {},
        MessageType.memo_glob : {},
        MessageType.sensor : {
            0 : type_fields.IntegerField('sensor_id'),
            2 : type_fields.StringField('name'),
            10 : object_fields.DistanceMillimetersToMetersField('manual_wheelsize'),
            11 : type_fields.FloatField('calibration_factor', scale=10.0),
            21 : object_fields.DistanceMillimetersToMetersField('auto_wheelsize'),
            32 : mp_fields.ProductField(),
            33 : mp_fields.ManufacturerField(),
            34 : fields.VersionField('software_version'),
            50 : type_fields.BytesField('ble_id')
        },
        MessageType.segment_id : {},
        MessageType.segment_leaderboard_entry : {},
        MessageType.segment_point : {},
        MessageType.segment_file : {},
        MessageType.workout_session : {},
        MessageType.watchface_settings : {
            0 : device_fields.WatchFaceModeField('mode'),
            1 : fields.NamedField('layout'),
        },
        MessageType.gps_metadata : {},
        MessageType.camera_event : {},
        MessageType.timestamp_correlation : {},
        MessageType.gyroscope_data : {},
        MessageType.accelerometer_data : {},
        MessageType.three_d_sensor_calibration : {},
        MessageType.video_frame : {},
        MessageType.obdii_data : {},
        MessageType.nmea_sentence : {},
        MessageType.aviation_attitude : {},
        MessageType.video : {},
        MessageType.video_title : {},
        MessageType.video_description : {},
        MessageType.video_clip : {},
        MessageType.ohr_settings : {
            0 : enum_fields.SwitchField('enabled'),
        },
        MessageType.exd_screen_configuration : {},
        MessageType.exd_data_field_configuration : {},
        MessageType.exd_data_concept_configuration : {},
        MessageType.field_description : {
            0 : type_fields.IntegerField('developer_data_index'),
            1 : fields.NamedField('field_definition_number'),
            2 : fields.FitBaseTypeField('fit_base_type_id'),
            3 : type_fields.StringField('field_name'),
            4 : fields.NamedField('array'),
            5 : type_fields.StringField('components'),
            6 : type_fields.FloatField('scale'),
            7 : type_fields.FloatField('offset'),
            8 : type_fields.StringField('units'),
            9 : type_fields.StringField('bits'),
            10 : type_fields.StringField('accumulate'),
            13 : enum_fields.FitBaseUnitField('fit_base_unit_id'),
            14 : type_fields.IntegerField('native_message_num'),
            15 : type_fields.IntegerField('native_field_num')
        },
        MessageType.dev_data_id : {
            0 : fields.NamedField('developer_id'),
            1 : type_fields.BytesField('application_id'),
            2 : mp_fields.ManufacturerField(),
            3 : type_fields.IntegerField('developer_data_index'),
            4 : fields.NamedField('application_version')
        },
        MessageType.magnetometer_data : {},
        MessageType.barometer_data : {},
        MessageType.one_d_sensor_calibration : {},
        MessageType.set : {},
        MessageType.stress_level : {
            0 : fields.NamedField('stress_level'),
            1 : fields.TimestampField('local_timestamp', utc=False),
        },
        MessageType.unknown_233 : {
            2 : type_fields.BytesField('unknown_2'),
        },
        MessageType.local_time : {
            0 : fields.TimestampField('local_timestamp', utc=False)
        },
        MessageType.dive_settings : {},
        MessageType.dive_gas : {},
        MessageType.dive_alarm : {},
        MessageType.exercise_title : {},
        MessageType.dive_summary : {},
        MessageType.pulse_ox : {
            0 : type_fields.FloatField('pulse_ox'),
        },
        # Names and types for this message are guesses
        MessageType.start : {
            2 : fields.TimestampField('local_timestamp', utc=False),
        },
        # Names and types for this message are guesses
        MessageType.data : {
            0 : type_fields.BytesField('data'),
        },
        # Names and types for this message are guesses
        MessageType.end : {},
        MessageType.unknown_284 : {
            1 : fields.TimestampField('ts_1', utc=True),
        },
        MessageType.jump : {
            0 : object_fields.DistanceMetersField('distance'),
            1 : object_fields.DistanceMetersField('height'),
            2 : type_fields.IntegerField('rotations'),
            3 : type_fields.FloatField('hang_time'),
            4 : type_fields.FloatField('score'),
            5 : object_fields.LatiitudeField('position_lat'),
            6 : object_fields.LongitudeField('position_long'),
            7 : object_fields.SpeedMpsField('speed'),
            8 : object_fields.SpeedMpsField('enhanced_speed'),
        },
        MessageType.respiration : {
            0 : type_fields.RespirationRateField(),
        },
        MessageType.climb_pro : {
            0 : object_fields.LatiitudeField('position_lat'),
            1 : object_fields.LongitudeField('position_long'),
            2 : enum_fields.ClimbProEventField('climb_pro_event'),
            3 : type_fields.IntegerField('climb_number'),
            4 : type_fields.IntegerField('climb_category'),
            5 : object_fields.DistanceMetersField('current_dist')
        },
        MessageType.mfg_range_min : {},
        MessageType.mfg_range_max : {},
    }
    reserved_field_indexes = {
        250 : type_fields.IntegerField('part_index'),
        253 : fields.TimestampField('timestamp', utc=True),
        254 : fields.MessageIndexField('message_index')
    }

    @classmethod
    def get_message_definition(cls, message_type):
        """Given a message number, return a message definition."""
        return cls.known_messages.get(message_type, {})
